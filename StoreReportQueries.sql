
------------CUSTOMERS SPENDING 1000$ OR MORE THAN 1000$-------------------------

--Identify the customers who spend more then 1000 $ in a month. Some special 
--offers and discounts can be given to such customers.

SELECT * FROM (SELECT DISTINCT CUSTOMER_NAME AS CUST_NAME,
  SUM(TOTAL_SHOPPING_AMOUNT)  AS TOTAL_AMOUNT_SPEND
FROM
  (SELECT DISTINCT CUSTOMER_NAME,
    TOTAL_AMOUNT AS TOTAL_SHOPPING_AMOUNT
  FROM
    (SELECT CUST.CUST_NAME                        AS CUSTOMER_NAME,
      PRODUCT.PRODUCT_NAME                        AS PRODUCT_NAME,
      BUYS.BUYS_ID                                AS BUYS_ID,
      (PURCHASE.QUANTITY * PRODUCT.SELLING_PRICE) AS TOTAL_AMOUNT
    FROM F16_14_PURCHASE PURCHASE,
      F16_14_PRODUCT PRODUCT,
      F16_14_CUSTOMER CUST,
      F16_14_BUYS BUYS
    WHERE PURCHASE.PRODUCT_ID = PRODUCT.PRODUCT_ID
    AND PURCHASE.BUYS_ID      = BUYS.BUYS_ID
    AND BUYS.CUST_ID          = CUST.CUST_ID
    )
  ORDER BY CUSTOMER_NAME
  )
GROUP BY CUSTOMER_NAME
ORDER BY TOTAL_AMOUNT_SPEND DESC)
WHERE TOTAL_AMOUNT_SPEND > 1000;

--------------------------------------------------------------------------------

-----------------DEBIT CARDS USED MORE NUMBER OF  TIMES-------------------------

--While purchasing the product the customer opts for some payment method like 
--Visa card or Credit card of any bank. Identfy the bank card mostly used so that
--offers can be made by collaborating with the banks.

SELECT BANK_CARD,
  SUM(TOTAL_AMOUNT) AS BANK_CREDIT_AMOUNT
FROM
  (SELECT DISTINCT PAYMENT.BANK_CARD            AS BANK_CARD,
    PAYMENT.BUYS_ID                             AS BUYS_ID,
    PRODUCT.PRODUCT_NAME                        AS PRODUCT_NAME,
    (PURCHASE.QUANTITY * PRODUCT.SELLING_PRICE) AS TOTAL_AMOUNT
  FROM F16_14_PRODUCT PRODUCT,
    F16_14_PAYMENT PAYMENT,
    F16_14_PURCHASE PURCHASE
  WHERE PURCHASE.PRODUCT_ID = PRODUCT.PRODUCT_ID
  AND PURCHASE.BUYS_ID      = PAYMENT.BUYS_ID
  ORDER BY PAYMENT.BUYS_ID
  )
GROUP BY BANK_CARD;

--------------------------------------------------------------------------------

-----------------PRODUCTS BOUGHT BY PEOPLE OF CERTAIN AGE-----------------------

--Identify the products which are mostly bought by people of certain age. This 
--will help the store to have some great sales on those products

SELECT *
FROM
  (SELECT PRODUCT.PRODUCT_NAME AS PRODUCT_NAME,
    COUNT(BUYS.CUST_ID)        AS COUNT_OF_CUST
  FROM F16_14_BUYS BUYS,
    F16_14_PRODUCT PRODUCT,
    F16_14_CUSTOMER CUSTOMER
  WHERE BUYS.PRODUCT_ID = PRODUCT.PRODUCT_ID
  AND BUYS.CUST_ID      = CUSTOMER.CUST_ID
  AND (TRUNC(MONTHS_BETWEEN(SYSDATE,DATE_OF_BIRTH)/12) BETWEEN 16 AND 30)
  GROUP BY PRODUCT.PRODUCT_NAME
  ORDER BY COUNT_OF_CUST DESC
  )
WHERE COUNT_OF_CUST >= 2;

--------------------------------------------------------------------------------

--------------TOTAL SALE OF CERTAIN PRODUCT AT CERTAIN STORE--------------------

--Calculate the total sale of a ceratin product at a certain store, This will 
--help analysze which product has more sales at which location.

SELECT STORES.CITY
  || ' - Store'        AS STORE_NAME,
  PRODUCT.PRODUCT_NAME AS PRODUCT_NAME,
  TOTAL_SALE           AS TOTAL_PRODUCT_SALE
FROM
  (SELECT BUYS.STORE_ID                                                           AS TEMP_STORE_ID,
    BUYS.PRODUCT_ID                                                               AS TEMP_PRODUCT_ID,
    (COUNT(BUYS.PRODUCT_ID) * PRODUCT.SELLING_PRICE)                              AS TOTAL_SALE,
    RANK() OVER (PARTITION BY BUYS.STORE_ID ORDER BY COUNT(BUYS.PRODUCT_ID) DESC) AS HIGHEST_SOLD_RANK
  FROM F16_14_BUYS BUYS,
    F16_14_PRODUCT PRODUCT
  WHERE BUYS.PRODUCT_ID = PRODUCT.PRODUCT_ID
  GROUP BY BUYS.STORE_ID,
    BUYS.PRODUCT_ID,
    PRODUCT.SELLING_PRICE
  ORDER BY BUYS.STORE_ID
  ),
  F16_14_PRODUCT PRODUCT,
  F16_14_STORE STORES
WHERE HIGHEST_SOLD_RANK = 1
AND PRODUCT.PRODUCT_ID  = TEMP_PRODUCT_ID
AND STORES.STORE_ID     = TEMP_STORE_ID
ORDER BY STORE_NAME;


--------------------------------------------------------------------------------

--------------REVENUE GENERATED BY EACH STORE AT TIME OF YEAR-------------------

--Calculate the total revenue generated by each store in a time of year. This 
--will be helpful at analyzing store having more number of sales.


SELECT FINAL_STORE.CITY || ' - Store' , 
  SUM(TOTAL_PRODUCT_SALE)                         AS TOTAL_REVENUE,
  TOTAL_MONTHS_SALARY                             AS TOTAL_MONTHS_SALARY,
  (SUM(TOTAL_PRODUCT_SALE) - TOTAL_MONTHS_SALARY) AS TOTAL_SALE
FROM
  (SELECT BUYS.STORE_ID AS TEMP_STORE_ID,
    BUYS.PRODUCT_ID,
    (COUNT(BUYS.PRODUCT_ID) * PRODUCT.SELLING_PRICE) AS TOTAL_PRODUCT_SALE
  FROM F16_14_BUYS BUYS,
    F16_14_PRODUCT PRODUCT,
    F16_14_PURCHASE PURCHASE
  WHERE BUYS.PRODUCT_ID  = PRODUCT.PRODUCT_ID
  AND BUYS.BUYS_ID       = PURCHASE.BUYS_ID
  AND PRODUCT.PRODUCT_ID = PURCHASE.PRODUCT_ID
  AND TRUNC(PURCHASE.DATE_OF_PURCHASE) BETWEEN TRUNC(TO_DATE('01-OCT-2016')) AND TRUNC(TO_DATE('31-DEC-2016'))
  GROUP BY PRODUCT.SELLING_PRICE,
    BUYS.STORE_ID,
    BUYS.PRODUCT_ID
  ORDER BY BUYS.STORE_ID
  ),
  (SELECT EMP_STORE_ID ,
    ROUND((TOTAL_EMPL_SALARY / TOTAL_MONTHS),0) AS TOTAL_MONTHS_SALARY
  FROM
    (SELECT EMPLOYEE.STORE_ID AS EMP_STORE_ID,
      SUM(EMPLOYEE.SALARY)    AS TOTAL_EMPL_SALARY
    FROM F16_14_EMPLOYEE EMPLOYEE
    GROUP BY EMPLOYEE.STORE_ID
    ),
    (SELECT ROUND(MONTHS_BETWEEN(TO_DATE('31-DEC-2016') , TO_DATE('01-OCT-2016')),0) AS TOTAL_MONTHS
    FROM DUAL
    )
  ),
F16_14_STORE FINAL_STORE
WHERE STORE_ID = EMP_STORE_ID
AND TEMP_STORE_ID = FINAL_STORE.STORE_ID
GROUP BY FINAL_STORE.STORE_ID, TOTAL_MONTHS_SALARY, FINAL_STORE.CITY
ORDER BY FINAL_STORE.STORE_ID;

--------------------------------------------------------------------------------

------------------TOTAL REVENUE GENERATED BY ANY SECTION------------------------

--Calculate the total revenue generated by any section. This analysis will help 
--getting to know the areas the store is generated more revenue and the areas
--which must be concentrated upon.

SELECT SEC_NAME,
  SUM(TOTAL_SALE) AS TOTAL_SECTION_SALE
FROM
  (SELECT PRODUCT.SECTION_NAME                  AS SEC_NAME,
    PRODUCT.PRODUCT_NAME                        AS PROD_NAME,
    (PURCHASE.QUANTITY * PRODUCT.SELLING_PRICE) AS TOTAL_SALE
  FROM F16_14_PURCHASE PURCHASE,
    F16_14_PRODUCT PRODUCT
  WHERE PURCHASE.PRODUCT_ID = PRODUCT.PRODUCT_ID
  )
GROUP BY SEC_NAME;

--------------------------------------------------------------------------------

-------------------------PRODUCTS NOT GETTING SOLD------------------------------

--Identify the products which are low on sales or not sold. This will be helpful 
--for decreasing the intake of that product and investing in products which
--will give more profit.

SELECT PRODUCT.PRODUCT_NAME,
  SUPPLIER.SUPPLIER_NAME
FROM
  (SELECT DISTINCT PRODUCT.PRODUCT_ID AS UNSOLD_PRODUCT_ID,
    SUPPLIES.SUPPLIER_ID              AS UNSOLD_SUPPLIER_ID
  FROM F16_14_PRODUCT PRODUCT,
    F16_14_SUPPLIES SUPPLIES
  WHERE PRODUCT.PRODUCT_ID    = SUPPLIES.PRODUCT_ID
  AND PRODUCT.PRODUCT_ID NOT IN
    (SELECT PRODUCT_ID FROM F16_14_BUYS
    )
  ),
  F16_14_PRODUCT PRODUCT,
  F16_14_SUPPLIER SUPPLIER
WHERE PRODUCT.PRODUCT_ID = UNSOLD_PRODUCT_ID
AND SUPPLIER.SUPPLIER_ID = UNSOLD_SUPPLIER_ID;

--------------------------------------------------------------------------------

----------PRODUCTS WITH THE HIGHEST SALES IN CERTAIN AMOUNT OF TIME-------------

--Identify products having largest sales in a certain amount of time. This will 
--help in maintaining the stocks of the product in certain amount of year.

SELECT *
FROM
  (SELECT PRODUCT.PRODUCT_NAME,
    SUM((PRODUCT.SELLING_PRICE * PURCHASE.QUANTITY)) AS TOTAL_PRODUCT_SALE
  FROM F16_14_PRODUCT PRODUCT,
    F16_14_PURCHASE PURCHASE
  WHERE PRODUCT.PRODUCT_ID = PURCHASE.PRODUCT_ID
  AND TRUNC(PURCHASE.DATE_OF_PURCHASE) BETWEEN TRUNC(TO_DATE('01-MAY-2015')) AND TRUNC(TO_DATE('31-JUL-2015'))
  GROUP BY PRODUCT.PRODUCT_NAME
  ORDER BY TOTAL_PRODUCT_SALE DESC
  )
WHERE ROWNUM <= 5; 

--------------------------------------------------------------------------------

------------------SUPPLIERS GIVING THE MAX NUMBER OF REVENUE--------------------

--Calculate the total revenue of the store generally froma supplier.

SELECT SUPPLIER.SUPPLIER_NAME,
  SUM((PRODUCT.SELLING_PRICE * PURCHASE.QUANTITY)) AS TOTAL_SALE
FROM F16_14_PRODUCT PRODUCT,
  F16_14_PURCHASE PURCHASE,
  F16_14_BUYS BUYS,
  F16_14_SUPPLIES SUPPLIES,
  F16_14_SUPPLIER SUPPLIER
WHERE PRODUCT.PRODUCT_ID = PURCHASE.PRODUCT_ID
AND PURCHASE.BUYS_ID     = BUYS.BUYS_ID
AND PRODUCT.PRODUCT_ID   = BUYS.PRODUCT_ID
AND BUYS.PRODUCT_ID      = SUPPLIES.PRODUCT_ID
AND BUYS.STORE_ID        = SUPPLIES.STORE_ID
AND SUPPLIER.SUPPLIER_ID = SUPPLIES.SUPPLIER_ID
GROUP BY SUPPLIER.SUPPLIER_NAME
ORDER BY TOTAL_SALE DESC;

--------------------------------------------------------------------------------

---------IDENTIFY SALES AS PER DISCOUNTS FOR PREVIOUS AND CURRENT YEAR----------

--For a certain product identify the sales for the current year and the previous
--year along with the discount given on the price. This analysis will help
--in identifying the impact of the discount factor on the product sales.

SELECT DISC_PRODUCT_NAME,
  DISCOUNT_YEAR,
  DISCOUNT_VALUE,
  SUM(TOTAL_SALE) AS TOTAL_PRODUCT_SALE
FROM
  (SELECT PRODUCT.PRODUCT_NAME AS DISC_PRODUCT_NAME,
    (
    CASE
      WHEN TRUNC(PURCHASE.DATE_OF_PURCHASE) BETWEEN TRUNC(TO_DATE('01-JAN-2015')) AND TRUNC(TO_DATE('31-DEC-2015'))
      THEN '2015'
      WHEN TRUNC(PURCHASE.DATE_OF_PURCHASE) BETWEEN TRUNC(TO_DATE('01-JAN-2016')) AND TRUNC(TO_DATE('31-DEC-2016'))
      THEN '2016'
    END )                                       AS DISCOUNT_YEAR,
    DISCOUNT.DISCOUNT_VALUE                     AS DISCOUNT_VALUE,
    (PRODUCT.SELLING_PRICE * PURCHASE.QUANTITY) AS TOTAL_SALE
  FROM F16_14_PRODUCT PRODUCT,
    F16_14_PURCHASE PURCHASE,
    F16_14_DISCOUNT DISCOUNT
  WHERE PRODUCT.PRODUCT_ID = PURCHASE.PRODUCT_ID
  AND DISCOUNT.PRODUCT_ID  = PRODUCT.PRODUCT_ID
  AND TRUNC(PURCHASE.DATE_OF_PURCHASE) BETWEEN TRUNC(DISCOUNT.DATE_FROM) AND TRUNC(DISCOUNT.DATE_TO)
  )
GROUP BY DISC_PRODUCT_NAME,
  DISCOUNT_YEAR,
  DISCOUNT_VALUE
ORDER BY DISC_PRODUCT_NAME,
  DISCOUNT_YEAR;

--------------------------------------------------------------------------------